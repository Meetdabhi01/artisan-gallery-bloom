name: React CI/CD (Optimized)

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout source code
        uses: actions/checkout@v4 # Updated to v4
        with:
          fetch-depth: 1 # Only get latest commit unless you need full history
          persist-credentials: true

      - name: 🧰 Setup Node.js
        uses: actions/setup-node@v4 # Updated to v4
        with:
          node-version: 20 # Use Node 20 for better performance
          cache: "npm"

      # Simplified single cache step - no separate cache action needed
      - name: 📦 Install dependencies
        run: |
          # Use npm ci with performance flags
          npm ci --prefer-offline --no-audit --no-fund --silent
        env:
          # Speed up npm operations
          NPM_CONFIG_PREFER_OFFLINE: true
          NPM_CONFIG_AUDIT: false
          NPM_CONFIG_FUND: false
          NPM_CONFIG_PROGRESS: false

      - name: 🛠️ Build React App (Parallel)
        run: |
          # Use all available CPU cores for build
          npm run build
        env:
          # Enable parallel processing for build tools
          NODE_OPTIONS: "--max-old-space-size=4096"
          CI: true

      - name: 🔍 Get Commit Info (Optimized)
        id: commit_info
        run: |
          # Get both message and hash in one operation
          COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          COMMIT_HASH=$(git log -1 --pretty=format:"%h")

          # Sanitize commit message for filename (remove special chars)
          SAFE_NAME=$(echo "$COMMIT_MSG" | sed 's/[^a-zA-Z0-9-_]//g' | cut -c1-50)

          # Properly escape the commit message for output
          echo "message=$(echo "$COMMIT_MSG" | sed 's/"/\\"/g')" >> $GITHUB_OUTPUT
          echo "hash=$COMMIT_HASH" >> $GITHUB_OUTPUT
          echo "safe_name=$SAFE_NAME" >> $GITHUB_OUTPUT

      - name: ⚡ Ultra Fast Build Processing
        run: |
          mkdir -p builds

          # Use commit hash + sanitized message for unique naming
          COMMIT_NAME=$(echo "${{ steps.get_commit.outputs.message }}" | tr -cd '[:alnum:]_-')

          ZIP_NAME="${COMMIT_NAME}"

          echo "🚀 Creating ultra-fast zip: ${ZIP_NAME}"

          # Ultra-fast zip with no compression + parallel processing
          cd dist

          # Use tar instead of zip for better performance
          time zip -r -0 "../builds/${ZIP_NAME}.zip" . &
          ZIP_PID=$!      echo "📦 Zip creation running in background..."

          # Wait for zip completion
          wait $ZIP_PID

          cd ..

          # Quick verification and size check
          if [ -f "builds/${ZIP_NAME}.zip" ]; then
            SIZE=$(du -sh "builds/${ZIP_NAME}.zip" | cut -f1)
            echo "✅ SUCCESS: ${ZIP_NAME}.zip created (${SIZE})"
          else
            echo "❌ FAILED: Zip creation failed!"
            exit 1
          fi

      - name: 🚀 Commit and Push (Optimized)
        run: |
          # Configure git once
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Add only the builds directory
          git add builds/ --force

          # Check if there are changes and commit in one step
          if ! git diff --cached --quiet; then
            # Escape commit message properly
            ESCAPED_MSG=$(echo "${{ steps.commit_info.outputs.message }}" | sed 's/"/\\"/g')
            git commit -m "🚀 Build: ${ESCAPED_MSG} (${{ steps.commit_info.outputs.hash }})"
            git push --quiet
            echo "✅ Build committed and pushed"
          else
            echo "ℹ️ No new build changes to commit"
          fi

      - name: 📊 Build Summary
        run: |
          echo "📁 Builds directory:"
          ls -lah builds/ 2>/dev/null || echo "No builds directory"

          echo "📈 Build stats:"
          echo "- Commit: ${{ steps.commit_info.outputs.hash }}"
          echo "- Message: ${{ steps.commit_info.outputs.message }}"
          echo "- Node version: $(node --version)"
          echo "- Build time: $(date)
